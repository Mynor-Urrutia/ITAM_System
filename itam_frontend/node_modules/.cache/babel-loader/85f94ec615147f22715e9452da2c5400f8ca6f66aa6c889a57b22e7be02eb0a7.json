{"ast":null,"code":"// C:\\Proyectos\\ITAM_System\\itam_frontend\\src\\axiosConfig.js\nimport axios from 'axios';\n// Asegúrate de definir BASE_API_URL en config.js, ej: export const BASE_API_URL = 'http://localhost:8000/api/';\nimport { BASE_API_URL } from './config';\nconst instance = axios.create({\n  baseURL: BASE_API_URL,\n  timeout: 5000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Interceptor para añadir el token a las peticiones\ninstance.interceptors.request.use(config => {\n  const token = localStorage.getItem('access_token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Opcional: Interceptor para manejar errores 401/403 globalmente\n// instance.interceptors.response.use(\n//     (response) => response,\n//     (error) => {\n//         if (error.response && (error.response.status === 401 || error.response.status === 403)) {\n//             // Aquí podrías redirigir al login, refrescar tokens, etc.\n//             console.error(\"Error de autenticación/autorización:\", error.response.status);\n//             // Puedes usar toastify aquí también: toast.error(\"Sesión expirada o acceso denegado.\");\n//         }\n//         return Promise.reject(error);\n//     }\n// );\n\nexport default instance;","map":{"version":3,"names":["axios","BASE_API_URL","instance","create","baseURL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject"],"sources":["C:/Proyectos/ITAM_System/itam_frontend/src/axiosConfig.js"],"sourcesContent":["// C:\\Proyectos\\ITAM_System\\itam_frontend\\src\\axiosConfig.js\r\nimport axios from 'axios';\r\n// Asegúrate de definir BASE_API_URL en config.js, ej: export const BASE_API_URL = 'http://localhost:8000/api/';\r\nimport { BASE_API_URL } from './config'; \r\n\r\nconst instance = axios.create({\r\n    baseURL: BASE_API_URL, \r\n    timeout: 5000,\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n    },\r\n});\r\n\r\n// Interceptor para añadir el token a las peticiones\r\ninstance.interceptors.request.use(\r\n    (config) => {\r\n        const token = localStorage.getItem('access_token');\r\n        if (token) {\r\n            config.headers.Authorization = `Bearer ${token}`;\r\n        }\r\n        return config;\r\n    },\r\n    (error) => {\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// Opcional: Interceptor para manejar errores 401/403 globalmente\r\n// instance.interceptors.response.use(\r\n//     (response) => response,\r\n//     (error) => {\r\n//         if (error.response && (error.response.status === 401 || error.response.status === 403)) {\r\n//             // Aquí podrías redirigir al login, refrescar tokens, etc.\r\n//             console.error(\"Error de autenticación/autorización:\", error.response.status);\r\n//             // Puedes usar toastify aquí también: toast.error(\"Sesión expirada o acceso denegado.\");\r\n//         }\r\n//         return Promise.reject(error);\r\n//     }\r\n// );\r\n\r\nexport default instance;"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB;AACA,SAASC,YAAY,QAAQ,UAAU;AAEvC,MAAMC,QAAQ,GAAGF,KAAK,CAACG,MAAM,CAAC;EAC1BC,OAAO,EAAEH,YAAY;EACrBI,OAAO,EAAE,IAAI;EACbC,OAAO,EAAE;IACL,cAAc,EAAE;EACpB;AACJ,CAAC,CAAC;;AAEF;AACAJ,QAAQ,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CAC5BC,MAAM,IAAK;EACR,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;EAClD,IAAIF,KAAK,EAAE;IACPD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EACpD;EACA,OAAOD,MAAM;AACjB,CAAC,EACAK,KAAK,IAAK;EACP,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CACJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeb,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}