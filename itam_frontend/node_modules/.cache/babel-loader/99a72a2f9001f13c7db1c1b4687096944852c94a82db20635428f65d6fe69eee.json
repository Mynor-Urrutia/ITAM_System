{"ast":null,"code":"var _jsxFileName = \"C:\\\\Proyectos\\\\ITAM_System\\\\itam_frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/context/AuthContext.js\nimport React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport { jwtDecode } from 'jwt-decode'; // Asegúrate de tener 'jwt-decode' instalado\nimport api from '../api'; // ¡Importa tu instancia 'api' configurada!\nimport { toast } from 'react-toastify';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const navigate = useNavigate();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const logout = useCallback(() => {\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('refresh_token');\n    localStorage.removeItem('user_data');\n    setIsAuthenticated(false);\n    setUser(null);\n    toast.info('Sesión cerrada.');\n    navigate('/login');\n  }, [navigate]);\n  const updateToken = useCallback(async () => {\n    const refresh_token = localStorage.getItem('refresh_token');\n    console.log('AuthContext: Attempting to update token. Refresh Token:', refresh_token ? refresh_token.substring(0, 30) + '...' : 'No refresh token');\n    if (!refresh_token) {\n      logout(); // Si no hay refresh token, cierra sesión\n      setLoading(false);\n      return;\n    }\n    try {\n      // Usa 'api' para la petición de refresh\n      const response = await api.post('/login/refresh/', {\n        refresh: refresh_token\n      });\n      localStorage.setItem('access_token', response.data.access);\n      // No necesitamos decodificar el refresh_token, solo el access_token\n      // Si el refresh fue exitoso, mantenemos la info del usuario existente\n      // o la volvemos a cargar si es necesario.\n      console.log('AuthContext: Token refreshed successfully. New Access Token:', response.data.access.substring(0, 30) + '...');\n      const storedUser = localStorage.getItem('user_data');\n      if (storedUser) {\n        setUser(JSON.parse(storedUser));\n        setIsAuthenticated(true);\n      } else {\n        // Si por alguna razón no hay user_data pero el token se refrescó,\n        // podrías considerar hacer una llamada a /api/users/me/ aquí.\n        // Por ahora, asumimos que user_data se establece en el login inicial.\n      }\n    } catch (err) {\n      console.error(\"Error refreshing token:\", err);\n      toast.error(\"Sesión expirada. Por favor, inicia sesión de nuevo.\");\n      logout(); // Si falla el refresh, cierra sesión\n    } finally {\n      setLoading(false);\n    }\n  }, [logout]);\n  const login = async (username, password) => {\n    setLoading(true); // Inicia loading para la petición de login\n    try {\n      // 1. Obtener tokens JWT\n      // Usa 'api' para la petición de login\n      const tokenResponse = await api.post('/login/', {\n        username,\n        password\n      });\n      const {\n        access,\n        refresh\n      } = tokenResponse.data;\n      localStorage.setItem('access_token', access);\n      localStorage.setItem('refresh_token', refresh);\n\n      // 2. Obtener detalles completos del usuario (incluyendo rol, puesto, etc.)\n      // Usa el token recién obtenido para esta petición\n      // La instancia 'api' ya lo adjuntará automáticamente\n      const userDetailsResponse = await api.get('/users/me/'); // ¡Necesitas esta vista en el backend!\n      const userData = userDetailsResponse.data;\n\n      // Guardar todos los datos del usuario en localStorage\n      localStorage.setItem('user_data', JSON.stringify(userData));\n      setUser(userData);\n      setIsAuthenticated(true);\n      toast.success('Inicio de sesión exitoso!');\n      navigate('/home'); // Redirige al home o dashboard\n    } catch (err) {\n      var _err$response, _err$response2, _err$response2$data;\n      console.error('Login error:', ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.data) || err);\n      const errorMessage = ((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.error) || 'Error en las credenciales. Inténtalo de nuevo.';\n      toast.error(errorMessage);\n      setIsAuthenticated(false);\n      setUser(null);\n      localStorage.removeItem('access_token'); // Limpia por si algo se guardó a medias\n      localStorage.removeItem('refresh_token');\n      localStorage.removeItem('user_data');\n    } finally {\n      setLoading(false); // Finaliza loading\n    }\n  };\n  useEffect(() => {\n    const loadInitialAuth = async () => {\n      const storedUser = localStorage.getItem('user_data');\n      const accessToken = localStorage.getItem('access_token');\n      const refreshToken = localStorage.getItem('refresh_token');\n      if (accessToken && refreshToken && storedUser) {\n        try {\n          const decodedAccess = jwtDecode(accessToken);\n          const user_data = JSON.parse(storedUser);\n          if (decodedAccess.exp * 1000 > Date.now()) {\n            // Token de acceso aún válido\n            setIsAuthenticated(true);\n            setUser(user_data);\n            setLoading(false);\n          } else {\n            // Token de acceso expirado, intentar refrescar\n            await updateToken(); // updateToken ya maneja setIsAuthenticated y setUser\n            // Re-leer user_data después del refresh, por si acaso\n            const updatedStoredUser = localStorage.getItem('user_data');\n            if (updatedStoredUser) {\n              setUser(JSON.parse(updatedStoredUser));\n              setIsAuthenticated(true);\n            } else {\n              // Si updateToken falló y llamó a logout, el estado ya estará limpio\n            }\n            setLoading(false);\n          }\n        } catch (err) {\n          console.error(\"Failed to decode token or parse user data:\", err);\n          logout(); // Si hay error al decodificar o parsear, cierra sesión\n        } finally {\n          setLoading(false);\n        }\n      } else {\n        setLoading(false);\n      }\n    };\n    loadInitialAuth();\n    const fourMinutes = 4 * 60 * 1000;\n    const interval = setInterval(updateToken, fourMinutes);\n    return () => clearInterval(interval);\n  }, [updateToken, logout]); // Dependencias para useEffect\n\n  const authContextValue = {\n    isAuthenticated,\n    user,\n    loading,\n    login,\n    logout\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Cargando autenticaci\\xF3n...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: authContextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 9\n  }, this);\n};\n_s(AuthProvider, \"Kg21ppkKyfbbGoDV/Ltd7JyXDd0=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","jwtDecode","api","toast","useNavigate","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","navigate","isAuthenticated","setIsAuthenticated","user","setUser","loading","setLoading","logout","localStorage","removeItem","info","updateToken","refresh_token","getItem","console","log","substring","response","post","refresh","setItem","data","access","storedUser","JSON","parse","err","error","login","username","password","tokenResponse","userDetailsResponse","get","userData","stringify","success","_err$response","_err$response2","_err$response2$data","errorMessage","loadInitialAuth","accessToken","refreshToken","decodedAccess","user_data","exp","Date","now","updatedStoredUser","fourMinutes","interval","setInterval","clearInterval","authContextValue","fileName","_jsxFileName","lineNumber","columnNumber","Provider","value","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/Proyectos/ITAM_System/itam_frontend/src/context/AuthContext.js"],"sourcesContent":["// src/context/AuthContext.js\r\nimport React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\r\nimport { jwtDecode } from 'jwt-decode'; // Asegúrate de tener 'jwt-decode' instalado\r\nimport api from '../api'; // ¡Importa tu instancia 'api' configurada!\r\nimport { toast } from 'react-toastify';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    const navigate = useNavigate();\r\n    const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n    const [user, setUser] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    const logout = useCallback(() => {\r\n        localStorage.removeItem('access_token');\r\n        localStorage.removeItem('refresh_token');\r\n        localStorage.removeItem('user_data');\r\n        setIsAuthenticated(false);\r\n        setUser(null);\r\n        toast.info('Sesión cerrada.');\r\n        navigate('/login');\r\n    }, [navigate]);\r\n\r\n    const updateToken = useCallback(async () => {\r\n        const refresh_token = localStorage.getItem('refresh_token');\r\n        console.log('AuthContext: Attempting to update token. Refresh Token:', refresh_token ? refresh_token.substring(0, 30) + '...' : 'No refresh token');\r\n        if (!refresh_token) {\r\n            logout(); // Si no hay refresh token, cierra sesión\r\n            setLoading(false);\r\n            return;\r\n        }\r\n\r\n        try {\r\n            // Usa 'api' para la petición de refresh\r\n            const response = await api.post('/login/refresh/', { refresh: refresh_token });\r\n            localStorage.setItem('access_token', response.data.access);\r\n            // No necesitamos decodificar el refresh_token, solo el access_token\r\n            // Si el refresh fue exitoso, mantenemos la info del usuario existente\r\n            // o la volvemos a cargar si es necesario.\r\n            console.log('AuthContext: Token refreshed successfully. New Access Token:', response.data.access.substring(0, 30) + '...');\r\n            const storedUser = localStorage.getItem('user_data');\r\n            if (storedUser) {\r\n                setUser(JSON.parse(storedUser));\r\n                setIsAuthenticated(true);\r\n            } else {\r\n                // Si por alguna razón no hay user_data pero el token se refrescó,\r\n                // podrías considerar hacer una llamada a /api/users/me/ aquí.\r\n                // Por ahora, asumimos que user_data se establece en el login inicial.\r\n            }\r\n        } catch (err) {\r\n            console.error(\"Error refreshing token:\", err);\r\n            toast.error(\"Sesión expirada. Por favor, inicia sesión de nuevo.\");\r\n            logout(); // Si falla el refresh, cierra sesión\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, [logout]);\r\n\r\n\r\n    const login = async (username, password) => {\r\n        setLoading(true); // Inicia loading para la petición de login\r\n        try {\r\n            // 1. Obtener tokens JWT\r\n            // Usa 'api' para la petición de login\r\n            const tokenResponse = await api.post('/login/', { username, password });\r\n            const { access, refresh } = tokenResponse.data;\r\n\r\n            localStorage.setItem('access_token', access);\r\n            localStorage.setItem('refresh_token', refresh);\r\n\r\n            // 2. Obtener detalles completos del usuario (incluyendo rol, puesto, etc.)\r\n            // Usa el token recién obtenido para esta petición\r\n            // La instancia 'api' ya lo adjuntará automáticamente\r\n            const userDetailsResponse = await api.get('/users/me/'); // ¡Necesitas esta vista en el backend!\r\n            const userData = userDetailsResponse.data;\r\n\r\n            // Guardar todos los datos del usuario en localStorage\r\n            localStorage.setItem('user_data', JSON.stringify(userData));\r\n            \r\n            setUser(userData);\r\n            setIsAuthenticated(true);\r\n            toast.success('Inicio de sesión exitoso!');\r\n            navigate('/home'); // Redirige al home o dashboard\r\n        } catch (err) {\r\n            console.error('Login error:', err.response?.data || err);\r\n            const errorMessage = err.response?.data?.error || 'Error en las credenciales. Inténtalo de nuevo.';\r\n            toast.error(errorMessage);\r\n            setIsAuthenticated(false);\r\n            setUser(null);\r\n            localStorage.removeItem('access_token'); // Limpia por si algo se guardó a medias\r\n            localStorage.removeItem('refresh_token');\r\n            localStorage.removeItem('user_data');\r\n        } finally {\r\n            setLoading(false); // Finaliza loading\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        const loadInitialAuth = async () => {\r\n            const storedUser = localStorage.getItem('user_data');\r\n            const accessToken = localStorage.getItem('access_token');\r\n            const refreshToken = localStorage.getItem('refresh_token');\r\n\r\n            if (accessToken && refreshToken && storedUser) {\r\n                try {\r\n                    const decodedAccess = jwtDecode(accessToken);\r\n                    const user_data = JSON.parse(storedUser);\r\n\r\n                    if (decodedAccess.exp * 1000 > Date.now()) { // Token de acceso aún válido\r\n                        setIsAuthenticated(true);\r\n                        setUser(user_data);\r\n                        setLoading(false);\r\n                    } else { // Token de acceso expirado, intentar refrescar\r\n                        await updateToken(); // updateToken ya maneja setIsAuthenticated y setUser\r\n                        // Re-leer user_data después del refresh, por si acaso\r\n                        const updatedStoredUser = localStorage.getItem('user_data');\r\n                        if (updatedStoredUser) {\r\n                            setUser(JSON.parse(updatedStoredUser));\r\n                            setIsAuthenticated(true);\r\n                        } else {\r\n                            // Si updateToken falló y llamó a logout, el estado ya estará limpio\r\n                        }\r\n                        setLoading(false);\r\n                    }\r\n                } catch (err) {\r\n                    console.error(\"Failed to decode token or parse user data:\", err);\r\n                    logout(); // Si hay error al decodificar o parsear, cierra sesión\r\n                } finally {\r\n                    setLoading(false);\r\n                }\r\n            } else {\r\n                setLoading(false);\r\n            }\r\n        };\r\n        loadInitialAuth();\r\n\r\n        const fourMinutes = 4 * 60 * 1000;\r\n        const interval = setInterval(updateToken, fourMinutes);\r\n        return () => clearInterval(interval);\r\n    }, [updateToken, logout]); // Dependencias para useEffect\r\n\r\n\r\n    const authContextValue = {\r\n        isAuthenticated,\r\n        user,\r\n        loading,\r\n        login,\r\n        logout,\r\n    };\r\n\r\n    if (loading) {\r\n        return <div>Cargando autenticación...</div>;\r\n    }\r\n\r\n    return (\r\n        <AuthContext.Provider value={authContextValue}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n\r\nexport const useAuth = () => useContext(AuthContext);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}