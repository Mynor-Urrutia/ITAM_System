{"ast":null,"code":"var _jsxFileName = \"C:\\\\Proyectos\\\\ITAM_System\\\\itam_frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// C:\\Proyectos\\ITAM_System\\itam_frontend\\src\\context\\AuthContext.js\nimport React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport { jwtDecode } from 'jwt-decode';\nimport api from '../api';\nimport { toast } from 'react-toastify';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const navigate = useNavigate();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [user, setUser] = useState(null); // This will now include is_staff, is_superuser\n  const [loading, setLoading] = useState(true);\n  // State to store user permissions as a Set for efficient lookups\n  const [userPermissions, setUserPermissions] = useState(new Set());\n  const logout = useCallback(() => {\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('refresh_token');\n    localStorage.removeItem('user_data');\n    setIsAuthenticated(false);\n    setUser(null);\n    setUserPermissions(new Set());\n    toast.info('Sesión cerrada.');\n    navigate('/login');\n  }, [navigate]);\n  const fetchUserDetails = useCallback(async () => {\n    try {\n      const response = await api.get('/users/me/');\n      const userData = response.data;\n      localStorage.setItem('user_data', JSON.stringify(userData));\n\n      // --- IMPORTANT: Ensure user state includes is_staff and is_superuser ---\n      setUser({\n        ...userData,\n        // Spread existing user data\n        is_staff: userData.is_staff,\n        // Explicitly capture these flags\n        is_superuser: userData.is_superuser\n      });\n      // ----------------------------------------------------------------------\n\n      setIsAuthenticated(true);\n\n      // Extract and set user permissions from fetched user data\n      if (Array.isArray(userData.user_permissions)) {\n        setUserPermissions(new Set(userData.user_permissions));\n      } else {\n        setUserPermissions(new Set()); // No permissions or invalid format\n      }\n      return userData;\n    } catch (err) {\n      console.error(\"Error fetching user details:\", err);\n      logout();\n      throw err;\n    }\n  }, [logout]);\n  const updateToken = useCallback(async () => {\n    const refresh_token = localStorage.getItem('refresh_token');\n    console.log('AuthContext: Attempting to update token. Refresh Token:', refresh_token ? refresh_token.substring(0, 30) + '...' : 'No refresh token');\n    if (!refresh_token) {\n      logout();\n      setLoading(false);\n      return;\n    }\n    try {\n      const response = await api.post('/login/refresh/', {\n        refresh: refresh_token\n      });\n      localStorage.setItem('access_token', response.data.access);\n      console.log('AuthContext: Token refreshed successfully. New Access Token:', response.data.access.substring(0, 30) + '...');\n      await fetchUserDetails(); // Fetch user details and permissions after token refresh\n    } catch (err) {\n      console.error(\"Error refreshing token:\", err);\n      toast.error(\"Sesión expirada. Por favor, inicia sesión de nuevo.\");\n      logout();\n    } finally {\n      setLoading(false);\n    }\n  }, [logout, fetchUserDetails]);\n  const login = async (username, password) => {\n    setLoading(true);\n    try {\n      const tokenResponse = await api.post('/login/', {\n        username,\n        password\n      });\n      const {\n        access,\n        refresh\n      } = tokenResponse.data;\n      localStorage.setItem('access_token', access);\n      localStorage.setItem('refresh_token', refresh);\n      console.log('AuthContext: Login successful. Access Token:', access.substring(0, 30) + '...');\n      console.log('AuthContext: Refresh Token:', refresh.substring(0, 30) + '...');\n      await fetchUserDetails(); // Fetch user details and permissions after successful login\n\n      toast.success('Inicio de sesión exitoso!');\n      navigate('/home');\n    } catch (err) {\n      var _err$response, _err$response2, _err$response2$data;\n      console.error('Login error:', ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.data) || err);\n      const errorMessage = ((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.detail) || 'Error en las credenciales. Inténtalo de nuevo.';\n      toast.error(errorMessage);\n      setIsAuthenticated(false);\n      setUser(null);\n      setUserPermissions(new Set());\n      localStorage.removeItem('access_token');\n      localStorage.removeItem('refresh_token');\n      localStorage.removeItem('user_data');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // hasPermission function\n  const hasPermission = useCallback(permissionCode => {\n    // Superusers always have all permissions\n    if (user && user.is_superuser) {\n      return true;\n    }\n    // Staff users (non-superusers) usually don't have all permissions unless specifically granted\n    // If 'is_staff' grants specific permissions, they should be reflected in userPermissions.\n\n    return userPermissions.has(permissionCode);\n  }, [user, userPermissions]); // Added user to dependencies\n\n  useEffect(() => {\n    const loadInitialAuth = async () => {\n      const storedAccessToken = localStorage.getItem('access_token');\n      const storedRefreshToken = localStorage.getItem('refresh_token');\n      const storedUserData = localStorage.getItem('user_data');\n      if (storedAccessToken && storedRefreshToken) {\n        try {\n          // Try to decode access token locally for quick check\n          const decodedToken = jwtDecode(storedAccessToken);\n          const currentTime = Date.now() / 1000;\n          if (decodedToken.exp > currentTime + 60) {\n            // Token valid for more than 60 seconds\n            console.log(\"AuthContext: Access token valid, attempting to use stored user data or fetch.\");\n            if (storedUserData) {\n              const parsedUserData = JSON.parse(storedUserData);\n              setUser({\n                ...parsedUserData,\n                is_staff: parsedUserData.is_staff,\n                is_superuser: parsedUserData.is_superuser\n              });\n              setIsAuthenticated(true);\n              if (Array.isArray(parsedUserData.user_permissions)) {\n                setUserPermissions(new Set(parsedUserData.user_permissions));\n              } else {\n                setUserPermissions(new Set());\n              }\n              setLoading(false); // Set loading to false here\n            } else {\n              // If no stored user data, fetch it\n              await fetchUserDetails();\n              setLoading(false);\n            }\n          } else {\n            // Token expired or expiring soon, try refreshing\n            console.log(\"AuthContext: Access token expired or expiring, refreshing.\");\n            await updateToken();\n          }\n        } catch (err) {\n          console.error(\"Error during initial auth check or token decode:\", err);\n          // If decoding fails or any other error, try to refresh\n          await updateToken();\n        }\n      } else {\n        setLoading(false); // No tokens, not authenticated\n      }\n    };\n    loadInitialAuth();\n\n    // Interval for periodic token refresh (every 4 minutes as you had)\n    const fourMinutes = 4 * 60 * 1000;\n    const interval = setInterval(() => {\n      if (localStorage.getItem('refresh_token') && isAuthenticated) {\n        // Only refresh if refresh token exists and user is considered authenticated\n        console.log(\"AuthContext: Interval triggered token refresh.\");\n        updateToken();\n      }\n    }, fourMinutes);\n    return () => clearInterval(interval); // Cleanup interval on unmount\n  }, [updateToken, fetchUserDetails, isAuthenticated]);\n  const authContextValue = {\n    isAuthenticated,\n    user,\n    loading,\n    login,\n    logout,\n    fetchUserDetails,\n    hasPermission,\n    userPermissions\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center items-center h-screen text-2xl text-gray-700\",\n      children: \"Cargando autenticaci\\xF3n...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: authContextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 202,\n    columnNumber: 9\n  }, this);\n};\n_s(AuthProvider, \"xQ54ZQZLTy6sctmI28KQSAw48YQ=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","jwtDecode","api","toast","useNavigate","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","navigate","isAuthenticated","setIsAuthenticated","user","setUser","loading","setLoading","userPermissions","setUserPermissions","Set","logout","localStorage","removeItem","info","fetchUserDetails","response","get","userData","data","setItem","JSON","stringify","is_staff","is_superuser","Array","isArray","user_permissions","err","console","error","updateToken","refresh_token","getItem","log","substring","post","refresh","access","login","username","password","tokenResponse","success","_err$response","_err$response2","_err$response2$data","errorMessage","detail","hasPermission","permissionCode","has","loadInitialAuth","storedAccessToken","storedRefreshToken","storedUserData","decodedToken","currentTime","Date","now","exp","parsedUserData","parse","fourMinutes","interval","setInterval","clearInterval","authContextValue","className","fileName","_jsxFileName","lineNumber","columnNumber","Provider","value","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["C:/Proyectos/ITAM_System/itam_frontend/src/context/AuthContext.js"],"sourcesContent":["// C:\\Proyectos\\ITAM_System\\itam_frontend\\src\\context\\AuthContext.js\r\nimport React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\r\nimport { jwtDecode } from 'jwt-decode';\r\nimport api from '../api';\r\nimport { toast } from 'react-toastify';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    const navigate = useNavigate();\r\n    const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n    const [user, setUser] = useState(null); // This will now include is_staff, is_superuser\r\n    const [loading, setLoading] = useState(true);\r\n    // State to store user permissions as a Set for efficient lookups\r\n    const [userPermissions, setUserPermissions] = useState(new Set());\r\n\r\n    const logout = useCallback(() => {\r\n        localStorage.removeItem('access_token');\r\n        localStorage.removeItem('refresh_token');\r\n        localStorage.removeItem('user_data');\r\n        setIsAuthenticated(false);\r\n        setUser(null);\r\n        setUserPermissions(new Set());\r\n        toast.info('Sesión cerrada.');\r\n        navigate('/login');\r\n    }, [navigate]);\r\n\r\n    const fetchUserDetails = useCallback(async () => {\r\n        try {\r\n            const response = await api.get('/users/me/');\r\n            const userData = response.data;\r\n            localStorage.setItem('user_data', JSON.stringify(userData));\r\n            \r\n            // --- IMPORTANT: Ensure user state includes is_staff and is_superuser ---\r\n            setUser({\r\n                ...userData, // Spread existing user data\r\n                is_staff: userData.is_staff, // Explicitly capture these flags\r\n                is_superuser: userData.is_superuser,\r\n            });\r\n            // ----------------------------------------------------------------------\r\n            \r\n            setIsAuthenticated(true);\r\n\r\n            // Extract and set user permissions from fetched user data\r\n            if (Array.isArray(userData.user_permissions)) {\r\n                setUserPermissions(new Set(userData.user_permissions));\r\n            } else {\r\n                setUserPermissions(new Set()); // No permissions or invalid format\r\n            }\r\n            return userData;\r\n        } catch (err) {\r\n            console.error(\"Error fetching user details:\", err);\r\n            logout();\r\n            throw err;\r\n        }\r\n    }, [logout]);\r\n\r\n    const updateToken = useCallback(async () => {\r\n        const refresh_token = localStorage.getItem('refresh_token');\r\n        console.log('AuthContext: Attempting to update token. Refresh Token:', refresh_token ? refresh_token.substring(0, 30) + '...' : 'No refresh token');\r\n        if (!refresh_token) {\r\n            logout();\r\n            setLoading(false);\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const response = await api.post('/login/refresh/', { refresh: refresh_token });\r\n            localStorage.setItem('access_token', response.data.access);\r\n            console.log('AuthContext: Token refreshed successfully. New Access Token:', response.data.access.substring(0, 30) + '...');\r\n            await fetchUserDetails(); // Fetch user details and permissions after token refresh\r\n\r\n        } catch (err) {\r\n            console.error(\"Error refreshing token:\", err);\r\n            toast.error(\"Sesión expirada. Por favor, inicia sesión de nuevo.\");\r\n            logout();\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, [logout, fetchUserDetails]);\r\n\r\n    const login = async (username, password) => {\r\n        setLoading(true);\r\n        try {\r\n            const tokenResponse = await api.post('/login/', { username, password });\r\n            const { access, refresh } = tokenResponse.data;\r\n\r\n            localStorage.setItem('access_token', access);\r\n            localStorage.setItem('refresh_token', refresh);\r\n\r\n            console.log('AuthContext: Login successful. Access Token:', access.substring(0, 30) + '...');\r\n            console.log('AuthContext: Refresh Token:', refresh.substring(0, 30) + '...');\r\n\r\n            await fetchUserDetails(); // Fetch user details and permissions after successful login\r\n\r\n            toast.success('Inicio de sesión exitoso!');\r\n            navigate('/home');\r\n        } catch (err) {\r\n            console.error('Login error:', err.response?.data || err);\r\n            const errorMessage = err.response?.data?.detail || 'Error en las credenciales. Inténtalo de nuevo.';\r\n            toast.error(errorMessage);\r\n            setIsAuthenticated(false);\r\n            setUser(null);\r\n            setUserPermissions(new Set());\r\n            localStorage.removeItem('access_token');\r\n            localStorage.removeItem('refresh_token');\r\n            localStorage.removeItem('user_data');\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    // hasPermission function\r\n    const hasPermission = useCallback((permissionCode) => {\r\n        // Superusers always have all permissions\r\n        if (user && user.is_superuser) {\r\n            return true;\r\n        }\r\n        // Staff users (non-superusers) usually don't have all permissions unless specifically granted\r\n        // If 'is_staff' grants specific permissions, they should be reflected in userPermissions.\r\n        \r\n        return userPermissions.has(permissionCode);\r\n    }, [user, userPermissions]); // Added user to dependencies\r\n\r\n    useEffect(() => {\r\n        const loadInitialAuth = async () => {\r\n            const storedAccessToken = localStorage.getItem('access_token');\r\n            const storedRefreshToken = localStorage.getItem('refresh_token');\r\n            const storedUserData = localStorage.getItem('user_data');\r\n\r\n            if (storedAccessToken && storedRefreshToken) {\r\n                try {\r\n                    // Try to decode access token locally for quick check\r\n                    const decodedToken = jwtDecode(storedAccessToken);\r\n                    const currentTime = Date.now() / 1000;\r\n\r\n                    if (decodedToken.exp > currentTime + 60) { // Token valid for more than 60 seconds\r\n                        console.log(\"AuthContext: Access token valid, attempting to use stored user data or fetch.\");\r\n                        if (storedUserData) {\r\n                            const parsedUserData = JSON.parse(storedUserData);\r\n                            setUser({\r\n                                ...parsedUserData,\r\n                                is_staff: parsedUserData.is_staff,\r\n                                is_superuser: parsedUserData.is_superuser\r\n                            });\r\n                            setIsAuthenticated(true);\r\n                            if (Array.isArray(parsedUserData.user_permissions)) {\r\n                                setUserPermissions(new Set(parsedUserData.user_permissions));\r\n                            } else {\r\n                                setUserPermissions(new Set());\r\n                            }\r\n                            setLoading(false); // Set loading to false here\r\n                        } else {\r\n                            // If no stored user data, fetch it\r\n                            await fetchUserDetails();\r\n                            setLoading(false);\r\n                        }\r\n                    } else { // Token expired or expiring soon, try refreshing\r\n                        console.log(\"AuthContext: Access token expired or expiring, refreshing.\");\r\n                        await updateToken();\r\n                    }\r\n                } catch (err) {\r\n                    console.error(\"Error during initial auth check or token decode:\", err);\r\n                    // If decoding fails or any other error, try to refresh\r\n                    await updateToken();\r\n                }\r\n            } else {\r\n                setLoading(false); // No tokens, not authenticated\r\n            }\r\n        };\r\n        loadInitialAuth();\r\n\r\n        // Interval for periodic token refresh (every 4 minutes as you had)\r\n        const fourMinutes = 4 * 60 * 1000;\r\n        const interval = setInterval(() => {\r\n            if (localStorage.getItem('refresh_token') && isAuthenticated) { // Only refresh if refresh token exists and user is considered authenticated\r\n                console.log(\"AuthContext: Interval triggered token refresh.\");\r\n                updateToken();\r\n            }\r\n        }, fourMinutes);\r\n\r\n        return () => clearInterval(interval); // Cleanup interval on unmount\r\n    }, [updateToken, fetchUserDetails, isAuthenticated]);\r\n\r\n    const authContextValue = {\r\n        isAuthenticated,\r\n        user,\r\n        loading,\r\n        login,\r\n        logout,\r\n        fetchUserDetails,\r\n        hasPermission,\r\n        userPermissions,\r\n    };\r\n\r\n    if (loading) {\r\n        return <div className=\"flex justify-center items-center h-screen text-2xl text-gray-700\">Cargando autenticación...</div>;\r\n    }\r\n\r\n    return (\r\n        <AuthContext.Provider value={authContextValue}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n\r\nexport const useAuth = () => {\r\n    const context = useContext(AuthContext);\r\n    if (!context) {\r\n        throw new Error('useAuth must be used within an AuthProvider');\r\n    }\r\n    return context;\r\n};"],"mappings":";;;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAC1F,SAASC,SAAS,QAAQ,YAAY;AACtC,OAAOC,GAAG,MAAM,QAAQ;AACxB,SAASC,KAAK,QAAQ,gBAAgB;AACtC,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,WAAW,gBAAGX,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMY,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC1C,MAAMC,QAAQ,GAAGP,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACQ,eAAe,EAAEC,kBAAkB,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAM,CAACgB,IAAI,EAAEC,OAAO,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EACxC,MAAM,CAACkB,OAAO,EAAEC,UAAU,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EAC5C;EACA,MAAM,CAACoB,eAAe,EAAEC,kBAAkB,CAAC,GAAGrB,QAAQ,CAAC,IAAIsB,GAAG,CAAC,CAAC,CAAC;EAEjE,MAAMC,MAAM,GAAGrB,WAAW,CAAC,MAAM;IAC7BsB,YAAY,CAACC,UAAU,CAAC,cAAc,CAAC;IACvCD,YAAY,CAACC,UAAU,CAAC,eAAe,CAAC;IACxCD,YAAY,CAACC,UAAU,CAAC,WAAW,CAAC;IACpCV,kBAAkB,CAAC,KAAK,CAAC;IACzBE,OAAO,CAAC,IAAI,CAAC;IACbI,kBAAkB,CAAC,IAAIC,GAAG,CAAC,CAAC,CAAC;IAC7BjB,KAAK,CAACqB,IAAI,CAAC,iBAAiB,CAAC;IAC7Bb,QAAQ,CAAC,QAAQ,CAAC;EACtB,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;EAEd,MAAMc,gBAAgB,GAAGzB,WAAW,CAAC,YAAY;IAC7C,IAAI;MACA,MAAM0B,QAAQ,GAAG,MAAMxB,GAAG,CAACyB,GAAG,CAAC,YAAY,CAAC;MAC5C,MAAMC,QAAQ,GAAGF,QAAQ,CAACG,IAAI;MAC9BP,YAAY,CAACQ,OAAO,CAAC,WAAW,EAAEC,IAAI,CAACC,SAAS,CAACJ,QAAQ,CAAC,CAAC;;MAE3D;MACAb,OAAO,CAAC;QACJ,GAAGa,QAAQ;QAAE;QACbK,QAAQ,EAAEL,QAAQ,CAACK,QAAQ;QAAE;QAC7BC,YAAY,EAAEN,QAAQ,CAACM;MAC3B,CAAC,CAAC;MACF;;MAEArB,kBAAkB,CAAC,IAAI,CAAC;;MAExB;MACA,IAAIsB,KAAK,CAACC,OAAO,CAACR,QAAQ,CAACS,gBAAgB,CAAC,EAAE;QAC1ClB,kBAAkB,CAAC,IAAIC,GAAG,CAACQ,QAAQ,CAACS,gBAAgB,CAAC,CAAC;MAC1D,CAAC,MAAM;QACHlB,kBAAkB,CAAC,IAAIC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;MACnC;MACA,OAAOQ,QAAQ;IACnB,CAAC,CAAC,OAAOU,GAAG,EAAE;MACVC,OAAO,CAACC,KAAK,CAAC,8BAA8B,EAAEF,GAAG,CAAC;MAClDjB,MAAM,CAAC,CAAC;MACR,MAAMiB,GAAG;IACb;EACJ,CAAC,EAAE,CAACjB,MAAM,CAAC,CAAC;EAEZ,MAAMoB,WAAW,GAAGzC,WAAW,CAAC,YAAY;IACxC,MAAM0C,aAAa,GAAGpB,YAAY,CAACqB,OAAO,CAAC,eAAe,CAAC;IAC3DJ,OAAO,CAACK,GAAG,CAAC,yDAAyD,EAAEF,aAAa,GAAGA,aAAa,CAACG,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,KAAK,GAAG,kBAAkB,CAAC;IACnJ,IAAI,CAACH,aAAa,EAAE;MAChBrB,MAAM,CAAC,CAAC;MACRJ,UAAU,CAAC,KAAK,CAAC;MACjB;IACJ;IAEA,IAAI;MACA,MAAMS,QAAQ,GAAG,MAAMxB,GAAG,CAAC4C,IAAI,CAAC,iBAAiB,EAAE;QAAEC,OAAO,EAAEL;MAAc,CAAC,CAAC;MAC9EpB,YAAY,CAACQ,OAAO,CAAC,cAAc,EAAEJ,QAAQ,CAACG,IAAI,CAACmB,MAAM,CAAC;MAC1DT,OAAO,CAACK,GAAG,CAAC,8DAA8D,EAAElB,QAAQ,CAACG,IAAI,CAACmB,MAAM,CAACH,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,KAAK,CAAC;MAC1H,MAAMpB,gBAAgB,CAAC,CAAC,CAAC,CAAC;IAE9B,CAAC,CAAC,OAAOa,GAAG,EAAE;MACVC,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEF,GAAG,CAAC;MAC7CnC,KAAK,CAACqC,KAAK,CAAC,qDAAqD,CAAC;MAClEnB,MAAM,CAAC,CAAC;IACZ,CAAC,SAAS;MACNJ,UAAU,CAAC,KAAK,CAAC;IACrB;EACJ,CAAC,EAAE,CAACI,MAAM,EAAEI,gBAAgB,CAAC,CAAC;EAE9B,MAAMwB,KAAK,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,QAAQ,KAAK;IACxClC,UAAU,CAAC,IAAI,CAAC;IAChB,IAAI;MACA,MAAMmC,aAAa,GAAG,MAAMlD,GAAG,CAAC4C,IAAI,CAAC,SAAS,EAAE;QAAEI,QAAQ;QAAEC;MAAS,CAAC,CAAC;MACvE,MAAM;QAAEH,MAAM;QAAED;MAAQ,CAAC,GAAGK,aAAa,CAACvB,IAAI;MAE9CP,YAAY,CAACQ,OAAO,CAAC,cAAc,EAAEkB,MAAM,CAAC;MAC5C1B,YAAY,CAACQ,OAAO,CAAC,eAAe,EAAEiB,OAAO,CAAC;MAE9CR,OAAO,CAACK,GAAG,CAAC,8CAA8C,EAAEI,MAAM,CAACH,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,KAAK,CAAC;MAC5FN,OAAO,CAACK,GAAG,CAAC,6BAA6B,EAAEG,OAAO,CAACF,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,KAAK,CAAC;MAE5E,MAAMpB,gBAAgB,CAAC,CAAC,CAAC,CAAC;;MAE1BtB,KAAK,CAACkD,OAAO,CAAC,2BAA2B,CAAC;MAC1C1C,QAAQ,CAAC,OAAO,CAAC;IACrB,CAAC,CAAC,OAAO2B,GAAG,EAAE;MAAA,IAAAgB,aAAA,EAAAC,cAAA,EAAAC,mBAAA;MACVjB,OAAO,CAACC,KAAK,CAAC,cAAc,EAAE,EAAAc,aAAA,GAAAhB,GAAG,CAACZ,QAAQ,cAAA4B,aAAA,uBAAZA,aAAA,CAAczB,IAAI,KAAIS,GAAG,CAAC;MACxD,MAAMmB,YAAY,GAAG,EAAAF,cAAA,GAAAjB,GAAG,CAACZ,QAAQ,cAAA6B,cAAA,wBAAAC,mBAAA,GAAZD,cAAA,CAAc1B,IAAI,cAAA2B,mBAAA,uBAAlBA,mBAAA,CAAoBE,MAAM,KAAI,gDAAgD;MACnGvD,KAAK,CAACqC,KAAK,CAACiB,YAAY,CAAC;MACzB5C,kBAAkB,CAAC,KAAK,CAAC;MACzBE,OAAO,CAAC,IAAI,CAAC;MACbI,kBAAkB,CAAC,IAAIC,GAAG,CAAC,CAAC,CAAC;MAC7BE,YAAY,CAACC,UAAU,CAAC,cAAc,CAAC;MACvCD,YAAY,CAACC,UAAU,CAAC,eAAe,CAAC;MACxCD,YAAY,CAACC,UAAU,CAAC,WAAW,CAAC;IACxC,CAAC,SAAS;MACNN,UAAU,CAAC,KAAK,CAAC;IACrB;EACJ,CAAC;;EAED;EACA,MAAM0C,aAAa,GAAG3D,WAAW,CAAE4D,cAAc,IAAK;IAClD;IACA,IAAI9C,IAAI,IAAIA,IAAI,CAACoB,YAAY,EAAE;MAC3B,OAAO,IAAI;IACf;IACA;IACA;;IAEA,OAAOhB,eAAe,CAAC2C,GAAG,CAACD,cAAc,CAAC;EAC9C,CAAC,EAAE,CAAC9C,IAAI,EAAEI,eAAe,CAAC,CAAC,CAAC,CAAC;;EAE7BnB,SAAS,CAAC,MAAM;IACZ,MAAM+D,eAAe,GAAG,MAAAA,CAAA,KAAY;MAChC,MAAMC,iBAAiB,GAAGzC,YAAY,CAACqB,OAAO,CAAC,cAAc,CAAC;MAC9D,MAAMqB,kBAAkB,GAAG1C,YAAY,CAACqB,OAAO,CAAC,eAAe,CAAC;MAChE,MAAMsB,cAAc,GAAG3C,YAAY,CAACqB,OAAO,CAAC,WAAW,CAAC;MAExD,IAAIoB,iBAAiB,IAAIC,kBAAkB,EAAE;QACzC,IAAI;UACA;UACA,MAAME,YAAY,GAAGjE,SAAS,CAAC8D,iBAAiB,CAAC;UACjD,MAAMI,WAAW,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI;UAErC,IAAIH,YAAY,CAACI,GAAG,GAAGH,WAAW,GAAG,EAAE,EAAE;YAAE;YACvC5B,OAAO,CAACK,GAAG,CAAC,+EAA+E,CAAC;YAC5F,IAAIqB,cAAc,EAAE;cAChB,MAAMM,cAAc,GAAGxC,IAAI,CAACyC,KAAK,CAACP,cAAc,CAAC;cACjDlD,OAAO,CAAC;gBACJ,GAAGwD,cAAc;gBACjBtC,QAAQ,EAAEsC,cAAc,CAACtC,QAAQ;gBACjCC,YAAY,EAAEqC,cAAc,CAACrC;cACjC,CAAC,CAAC;cACFrB,kBAAkB,CAAC,IAAI,CAAC;cACxB,IAAIsB,KAAK,CAACC,OAAO,CAACmC,cAAc,CAAClC,gBAAgB,CAAC,EAAE;gBAChDlB,kBAAkB,CAAC,IAAIC,GAAG,CAACmD,cAAc,CAAClC,gBAAgB,CAAC,CAAC;cAChE,CAAC,MAAM;gBACHlB,kBAAkB,CAAC,IAAIC,GAAG,CAAC,CAAC,CAAC;cACjC;cACAH,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;YACvB,CAAC,MAAM;cACH;cACA,MAAMQ,gBAAgB,CAAC,CAAC;cACxBR,UAAU,CAAC,KAAK,CAAC;YACrB;UACJ,CAAC,MAAM;YAAE;YACLsB,OAAO,CAACK,GAAG,CAAC,4DAA4D,CAAC;YACzE,MAAMH,WAAW,CAAC,CAAC;UACvB;QACJ,CAAC,CAAC,OAAOH,GAAG,EAAE;UACVC,OAAO,CAACC,KAAK,CAAC,kDAAkD,EAAEF,GAAG,CAAC;UACtE;UACA,MAAMG,WAAW,CAAC,CAAC;QACvB;MACJ,CAAC,MAAM;QACHxB,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;MACvB;IACJ,CAAC;IACD6C,eAAe,CAAC,CAAC;;IAEjB;IACA,MAAMW,WAAW,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI;IACjC,MAAMC,QAAQ,GAAGC,WAAW,CAAC,MAAM;MAC/B,IAAIrD,YAAY,CAACqB,OAAO,CAAC,eAAe,CAAC,IAAI/B,eAAe,EAAE;QAAE;QAC5D2B,OAAO,CAACK,GAAG,CAAC,gDAAgD,CAAC;QAC7DH,WAAW,CAAC,CAAC;MACjB;IACJ,CAAC,EAAEgC,WAAW,CAAC;IAEf,OAAO,MAAMG,aAAa,CAACF,QAAQ,CAAC,CAAC,CAAC;EAC1C,CAAC,EAAE,CAACjC,WAAW,EAAEhB,gBAAgB,EAAEb,eAAe,CAAC,CAAC;EAEpD,MAAMiE,gBAAgB,GAAG;IACrBjE,eAAe;IACfE,IAAI;IACJE,OAAO;IACPiC,KAAK;IACL5B,MAAM;IACNI,gBAAgB;IAChBkC,aAAa;IACbzC;EACJ,CAAC;EAED,IAAIF,OAAO,EAAE;IACT,oBAAOV,OAAA;MAAKwE,SAAS,EAAC,kEAAkE;MAAArE,QAAA,EAAC;IAAyB;MAAAsE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC5H;EAEA,oBACI5E,OAAA,CAACC,WAAW,CAAC4E,QAAQ;IAACC,KAAK,EAAEP,gBAAiB;IAAApE,QAAA,EACzCA;EAAQ;IAAAsE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAE/B,CAAC;AAACxE,EAAA,CApMWF,YAAY;EAAA,QACJJ,WAAW;AAAA;AAAAiF,EAAA,GADnB7E,YAAY;AAsMzB,OAAO,MAAM8E,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EACzB,MAAMC,OAAO,GAAG3F,UAAU,CAACU,WAAW,CAAC;EACvC,IAAI,CAACiF,OAAO,EAAE;IACV,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;EAClE;EACA,OAAOD,OAAO;AAClB,CAAC;AAACD,GAAA,CANWD,OAAO;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}