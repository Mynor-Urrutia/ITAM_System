{"ast":null,"code":"// C:\\Proyectos\\ITAM_System\\itam_frontend\\src\\api.js\nimport axios from 'axios';\nimport { jwtDecode } from 'jwt-decode'; // Make sure you have jwt-decode installed\n\nconst api = axios.create({\n  baseURL: 'http://127.0.0.1:8000/api/',\n  // Your Django API base URL\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to attach JWT token\napi.interceptors.request.use(config => {\n  const accessToken = localStorage.getItem('access_token'); // Make sure this key matches\n  console.log('API Interceptor: Access Token from localStorage:', accessToken ? accessToken.substring(0, 30) + '...' : 'No token'); // Log del token (parcial)\n  if (accessToken) {\n    config.headers.Authorization = `Bearer ${accessToken}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor to handle token refresh\napi.interceptors.response.use(response => response, async error => {\n  const originalRequest = error.config;\n  // If the error is 401 Unauthorized and it's not a login/refresh request\n  // and we haven't tried to refresh yet for this request\n  if (error.response.status === 401 && !originalRequest._retry) {\n    originalRequest._retry = true; // Mark as retried\n    const refreshToken = localStorage.getItem('refresh_token'); // Make sure this key matches\n\n    if (refreshToken) {\n      try {\n        const response = await axios.post('http://127.0.0.1:8000/api/login/refresh/', {\n          refresh: refreshToken\n        });\n        const newAccessToken = response.data.access;\n        localStorage.setItem('access_token', newAccessToken);\n\n        // Update the original request's header with the new token\n        originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;\n        return api(originalRequest); // Retry the original request with the new token\n      } catch (refreshError) {\n        // If refreshing fails, clear tokens and redirect to login\n        console.error('Token refresh failed:', refreshError);\n        localStorage.removeItem('access_token');\n        localStorage.removeItem('refresh_token');\n        localStorage.removeItem('user_data'); // Clear user data as well\n        window.location.href = '/login'; // Redirect to login page\n        return Promise.reject(refreshError);\n      }\n    } else {\n      // No refresh token available, redirect to login\n      localStorage.removeItem('access_token');\n      localStorage.removeItem('refresh_token');\n      localStorage.removeItem('user_data');\n      window.location.href = '/login';\n    }\n  }\n  return Promise.reject(error);\n});\n\n// --- Funciones para la gestión de Regiones (ya deberían existir) ---\n// Si no las tienes en este archivo, puedes añadirlas aquí o en otro archivo de servicios\nexport const getRegions = () => api.get('masterdata/regions/');\nexport const createRegion = regionData => api.post('masterdata/regions/', regionData);\nexport const updateRegion = (id, regionData) => api.put(`masterdata/regions/${id}/`, regionData);\nexport const deleteRegion = id => api.delete(`masterdata/regions/${id}/`);\n\n// --- ¡NUEVAS FUNCIONES PARA DEPARTAMENTOS! ---\nexport const getDepartamentos = () => api.get('masterdata/departamentos/');\nexport const createDepartamento = departamentoData => api.post('masterdata/departamentos/', departamentoData);\nexport const updateDepartamento = (id, departamentoData) => api.put(`masterdata/departamentos/${id}/`, departamentoData);\nexport const deleteDepartamento = id => api.delete(`masterdata/departamentos/${id}/`);\n\n// --- ¡NUEVAS FUNCIONES PARA ÁREAS! ---\nexport const getAreas = () => api.get('masterdata/areas/');\nexport const createArea = areaData => api.post('masterdata/areas/', areaData);\nexport const updateArea = (id, areaData) => api.put(`masterdata/areas/${id}/`, areaData);\nexport const deleteArea = id => api.delete(`masterdata/areas/${id}/`);\n\n// --- Funciones para la gestión de Tipos de Activos ---\nexport const getTiposActivos = () => api.get('masterdata/tipos-activos/');\nexport const createTipoActivo = tipoActivoData => api.post('masterdata/tipos-activos/', tipoActivoData);\nexport const updateTipoActivo = (id, tipoActivoData) => api.put(`masterdata/tipos-activos/${id}/`, tipoActivoData);\nexport const deleteTipoActivo = id => api.delete(`masterdata/tipos-activos/${id}/`);\nexport default api;","map":{"version":3,"names":["axios","jwtDecode","api","create","baseURL","headers","interceptors","request","use","config","accessToken","localStorage","getItem","console","log","substring","Authorization","error","Promise","reject","response","originalRequest","status","_retry","refreshToken","post","refresh","newAccessToken","data","access","setItem","refreshError","removeItem","window","location","href","getRegions","get","createRegion","regionData","updateRegion","id","put","deleteRegion","delete","getDepartamentos","createDepartamento","departamentoData","updateDepartamento","deleteDepartamento","getAreas","createArea","areaData","updateArea","deleteArea","getTiposActivos","createTipoActivo","tipoActivoData","updateTipoActivo","deleteTipoActivo"],"sources":["C:/Proyectos/ITAM_System/itam_frontend/src/api.js"],"sourcesContent":["// C:\\Proyectos\\ITAM_System\\itam_frontend\\src\\api.js\r\nimport axios from 'axios';\r\nimport { jwtDecode } from 'jwt-decode'; // Make sure you have jwt-decode installed\r\n\r\nconst api = axios.create({\r\n    baseURL: 'http://127.0.0.1:8000/api/', // Your Django API base URL\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n    },\r\n});\r\n\r\n// Request interceptor to attach JWT token\r\napi.interceptors.request.use(\r\n    (config) => {\r\n        const accessToken = localStorage.getItem('access_token'); // Make sure this key matches\r\n        console.log('API Interceptor: Access Token from localStorage:', accessToken ? accessToken.substring(0, 30) + '...' : 'No token'); // Log del token (parcial)\r\n        if (accessToken) {\r\n            config.headers.Authorization = `Bearer ${accessToken}`;\r\n        }\r\n        return config;\r\n    },\r\n    (error) => {\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// Response interceptor to handle token refresh\r\napi.interceptors.response.use(\r\n    (response) => response,\r\n    async (error) => {\r\n        const originalRequest = error.config;\r\n        // If the error is 401 Unauthorized and it's not a login/refresh request\r\n        // and we haven't tried to refresh yet for this request\r\n        if (error.response.status === 401 && !originalRequest._retry) {\r\n            originalRequest._retry = true; // Mark as retried\r\n            const refreshToken = localStorage.getItem('refresh_token'); // Make sure this key matches\r\n\r\n            if (refreshToken) {\r\n                try {\r\n                    const response = await axios.post('http://127.0.0.1:8000/api/login/refresh/', {\r\n                        refresh: refreshToken,\r\n                    });\r\n                    const newAccessToken = response.data.access;\r\n                    localStorage.setItem('access_token', newAccessToken);\r\n\r\n                    // Update the original request's header with the new token\r\n                    originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;\r\n                    return api(originalRequest); // Retry the original request with the new token\r\n                } catch (refreshError) {\r\n                    // If refreshing fails, clear tokens and redirect to login\r\n                    console.error('Token refresh failed:', refreshError);\r\n                    localStorage.removeItem('access_token');\r\n                    localStorage.removeItem('refresh_token');\r\n                    localStorage.removeItem('user_data'); // Clear user data as well\r\n                    window.location.href = '/login'; // Redirect to login page\r\n                    return Promise.reject(refreshError);\r\n                }\r\n            } else {\r\n                // No refresh token available, redirect to login\r\n                localStorage.removeItem('access_token');\r\n                localStorage.removeItem('refresh_token');\r\n                localStorage.removeItem('user_data');\r\n                window.location.href = '/login';\r\n            }\r\n        }\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// --- Funciones para la gestión de Regiones (ya deberían existir) ---\r\n// Si no las tienes en este archivo, puedes añadirlas aquí o en otro archivo de servicios\r\nexport const getRegions = () => api.get('masterdata/regions/');\r\nexport const createRegion = (regionData) => api.post('masterdata/regions/', regionData);\r\nexport const updateRegion = (id, regionData) => api.put(`masterdata/regions/${id}/`, regionData);\r\nexport const deleteRegion = (id) => api.delete(`masterdata/regions/${id}/`);\r\n\r\n// --- ¡NUEVAS FUNCIONES PARA DEPARTAMENTOS! ---\r\nexport const getDepartamentos = () => api.get('masterdata/departamentos/');\r\nexport const createDepartamento = (departamentoData) => api.post('masterdata/departamentos/', departamentoData);\r\nexport const updateDepartamento = (id, departamentoData) => api.put(`masterdata/departamentos/${id}/`, departamentoData);\r\nexport const deleteDepartamento = (id) => api.delete(`masterdata/departamentos/${id}/`);\r\n\r\n// --- ¡NUEVAS FUNCIONES PARA ÁREAS! ---\r\nexport const getAreas = () => api.get('masterdata/areas/');\r\nexport const createArea = (areaData) => api.post('masterdata/areas/', areaData);\r\nexport const updateArea = (id, areaData) => api.put(`masterdata/areas/${id}/`, areaData);\r\nexport const deleteArea = (id) => api.delete(`masterdata/areas/${id}/`);\r\n\r\n// --- Funciones para la gestión de Tipos de Activos ---\r\nexport const getTiposActivos = () => api.get('masterdata/tipos-activos/');\r\nexport const createTipoActivo = (tipoActivoData) => api.post('masterdata/tipos-activos/', tipoActivoData);\r\nexport const updateTipoActivo = (id, tipoActivoData) => api.put(`masterdata/tipos-activos/${id}/`, tipoActivoData);\r\nexport const deleteTipoActivo = (id) => api.delete(`masterdata/tipos-activos/${id}/`);\r\n\r\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}