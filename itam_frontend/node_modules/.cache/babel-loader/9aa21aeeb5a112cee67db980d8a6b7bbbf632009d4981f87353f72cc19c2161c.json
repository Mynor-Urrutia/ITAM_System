{"ast":null,"code":"var _jsxFileName = \"C:\\\\Proyectos\\\\ITAM_System\\\\itam_frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// C:\\Proyectos\\ITAM_System\\itam_frontend\\src\\context\\AuthContext.js\nimport React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport { jwtDecode } from 'jwt-decode'; // Keep this, though we're mostly using /users/me/ now for data\nimport api from '../api'; // Your custom axios instance\nimport { toast } from 'react-toastify';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const navigate = useNavigate();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  // NEW: State to store user permissions as a Set for efficient lookups\n  const [userPermissions, setUserPermissions] = useState(new Set());\n  const logout = useCallback(() => {\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('refresh_token');\n    localStorage.removeItem('user_data');\n    setIsAuthenticated(false);\n    setUser(null);\n    // NEW: Clear permissions on logout\n    setUserPermissions(new Set());\n    toast.info('Sesión cerrada.');\n    navigate('/login');\n  }, [navigate]);\n  const fetchUserDetails = useCallback(async () => {\n    try {\n      const response = await api.get('/users/me/');\n      const userData = response.data;\n      localStorage.setItem('user_data', JSON.stringify(userData));\n      setUser(userData);\n      setIsAuthenticated(true);\n\n      // NEW: Extract and set user permissions from fetched user data\n      if (Array.isArray(userData.user_permissions)) {\n        // Assuming 'user_permissions' field from /users/me/\n        setUserPermissions(new Set(userData.user_permissions));\n      } else if (Array.isArray(userData.permissions)) {\n        // Fallback if your field is named 'permissions'\n        setUserPermissions(new Set(userData.permissions));\n      } else {\n        setUserPermissions(new Set()); // No permissions or invalid format\n      }\n      return userData;\n    } catch (err) {\n      console.error(\"Error fetching user details:\", err);\n      logout();\n      throw err;\n    }\n  }, [logout]);\n  const updateToken = useCallback(async () => {\n    const refresh_token = localStorage.getItem('refresh_token');\n    console.log('AuthContext: Attempting to update token. Refresh Token:', refresh_token ? refresh_token.substring(0, 30) + '...' : 'No refresh token');\n    if (!refresh_token) {\n      logout();\n      setLoading(false);\n      return;\n    }\n    try {\n      const response = await api.post('/login/refresh/', {\n        refresh: refresh_token\n      });\n      localStorage.setItem('access_token', response.data.access);\n      console.log('AuthContext: Token refreshed successfully. New Access Token:', response.data.access.substring(0, 30) + '...');\n      await fetchUserDetails(); // Fetch user details and permissions after token refresh\n    } catch (err) {\n      console.error(\"Error refreshing token:\", err);\n      toast.error(\"Sesión expirada. Por favor, inicia sesión de nuevo.\");\n      logout();\n    } finally {\n      setLoading(false);\n    }\n  }, [logout, fetchUserDetails]);\n  const login = async (username, password) => {\n    setLoading(true);\n    try {\n      const tokenResponse = await api.post('/login/', {\n        username,\n        password\n      });\n      const {\n        access,\n        refresh\n      } = tokenResponse.data;\n      localStorage.setItem('access_token', access);\n      localStorage.setItem('refresh_token', refresh);\n      console.log('AuthContext: Login successful. Access Token:', access.substring(0, 30) + '...');\n      console.log('AuthContext: Refresh Token:', refresh.substring(0, 30) + '...');\n      await fetchUserDetails(); // Fetch user details and permissions after successful login\n\n      toast.success('Inicio de sesión exitoso!');\n      navigate('/home');\n    } catch (err) {\n      var _err$response, _err$response2, _err$response2$data;\n      console.error('Login error:', ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.data) || err);\n      const errorMessage = ((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.detail) || 'Error en las credenciales. Inténtalo de nuevo.';\n      toast.error(errorMessage);\n      setIsAuthenticated(false);\n      setUser(null);\n      // NEW: Clear permissions on login failure\n      setUserPermissions(new Set());\n      localStorage.removeItem('access_token');\n      localStorage.removeItem('refresh_token');\n      localStorage.removeItem('user_data');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // NEW: hasPermission function\n  const hasPermission = useCallback(permissionCode => {\n    // console.log(\"Checking permission:\", permissionCode, \"User permissions:\", Array.from(userPermissions)); // For debugging\n    return userPermissions.has(permissionCode);\n  }, [userPermissions]);\n  useEffect(() => {\n    const loadInitialAuth = async () => {\n      const storedAccessToken = localStorage.getItem('access_token');\n      const storedRefreshToken = localStorage.getItem('refresh_token');\n      if (storedAccessToken && storedRefreshToken) {\n        try {\n          // Attempt to fetch user details first if access token seems valid\n          // This avoids a refresh cycle if the access token is still good\n          const decodedToken = jwtDecode(storedAccessToken);\n          const currentTime = Date.now() / 1000;\n          if (decodedToken.exp > currentTime + 60) {\n            // Token valid for more than 60 seconds\n            console.log(\"AuthContext: Access token valid, fetching user details.\");\n            await fetchUserDetails();\n            setLoading(false); // Set loading to false here if valid\n          } else {\n            // Token expired or expiring soon, try refreshing\n            console.log(\"AuthContext: Access token expired or expiring, refreshing.\");\n            await updateToken();\n          }\n        } catch (err) {\n          console.error(\"Error during initial auth check or token decode:\", err);\n          // If decoding fails or any other error, try to refresh\n          await updateToken();\n        }\n      } else {\n        setLoading(false); // No tokens, not authenticated\n      }\n    };\n    loadInitialAuth();\n\n    // Interval for periodic token refresh (every 4 minutes as you had)\n    const fourMinutes = 4 * 60 * 1000;\n    const interval = setInterval(() => {\n      if (localStorage.getItem('refresh_token') && isAuthenticated) {\n        // Only refresh if refresh token exists and user is considered authenticated\n        console.log(\"AuthContext: Interval triggered token refresh.\");\n        updateToken();\n      }\n    }, fourMinutes);\n    return () => clearInterval(interval); // Cleanup interval on unmount\n  }, [updateToken, fetchUserDetails, isAuthenticated]); // Added isAuthenticated to dependencies\n\n  const authContextValue = {\n    isAuthenticated,\n    user,\n    loading,\n    login,\n    logout,\n    fetchUserDetails,\n    hasPermission,\n    // NEW: Expose hasPermission\n    userPermissions // Optional: expose for debugging or display\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center items-center h-screen text-2xl text-gray-700\",\n      children: \"Cargando autenticaci\\xF3n...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: authContextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 175,\n    columnNumber: 9\n  }, this);\n};\n_s(AuthProvider, \"xQ54ZQZLTy6sctmI28KQSAw48YQ=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","jwtDecode","api","toast","useNavigate","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","navigate","isAuthenticated","setIsAuthenticated","user","setUser","loading","setLoading","userPermissions","setUserPermissions","Set","logout","localStorage","removeItem","info","fetchUserDetails","response","get","userData","data","setItem","JSON","stringify","Array","isArray","user_permissions","permissions","err","console","error","updateToken","refresh_token","getItem","log","substring","post","refresh","access","login","username","password","tokenResponse","success","_err$response","_err$response2","_err$response2$data","errorMessage","detail","hasPermission","permissionCode","has","loadInitialAuth","storedAccessToken","storedRefreshToken","decodedToken","currentTime","Date","now","exp","fourMinutes","interval","setInterval","clearInterval","authContextValue","className","fileName","_jsxFileName","lineNumber","columnNumber","Provider","value","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["C:/Proyectos/ITAM_System/itam_frontend/src/context/AuthContext.js"],"sourcesContent":["// C:\\Proyectos\\ITAM_System\\itam_frontend\\src\\context\\AuthContext.js\r\nimport React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\r\nimport { jwtDecode } from 'jwt-decode'; // Keep this, though we're mostly using /users/me/ now for data\r\nimport api from '../api'; // Your custom axios instance\r\nimport { toast } from 'react-toastify';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    const navigate = useNavigate();\r\n    const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n    const [user, setUser] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n    // NEW: State to store user permissions as a Set for efficient lookups\r\n    const [userPermissions, setUserPermissions] = useState(new Set());\r\n\r\n    const logout = useCallback(() => {\r\n        localStorage.removeItem('access_token');\r\n        localStorage.removeItem('refresh_token');\r\n        localStorage.removeItem('user_data');\r\n        setIsAuthenticated(false);\r\n        setUser(null);\r\n        // NEW: Clear permissions on logout\r\n        setUserPermissions(new Set());\r\n        toast.info('Sesión cerrada.');\r\n        navigate('/login');\r\n    }, [navigate]);\r\n\r\n    const fetchUserDetails = useCallback(async () => {\r\n        try {\r\n            const response = await api.get('/users/me/');\r\n            const userData = response.data;\r\n            localStorage.setItem('user_data', JSON.stringify(userData));\r\n            setUser(userData);\r\n            setIsAuthenticated(true);\r\n\r\n            // NEW: Extract and set user permissions from fetched user data\r\n            if (Array.isArray(userData.user_permissions)) { // Assuming 'user_permissions' field from /users/me/\r\n                setUserPermissions(new Set(userData.user_permissions));\r\n            } else if (Array.isArray(userData.permissions)) { // Fallback if your field is named 'permissions'\r\n                 setUserPermissions(new Set(userData.permissions));\r\n            } else {\r\n                setUserPermissions(new Set()); // No permissions or invalid format\r\n            }\r\n            return userData;\r\n        } catch (err) {\r\n            console.error(\"Error fetching user details:\", err);\r\n            logout();\r\n            throw err;\r\n        }\r\n    }, [logout]);\r\n\r\n    const updateToken = useCallback(async () => {\r\n        const refresh_token = localStorage.getItem('refresh_token');\r\n        console.log('AuthContext: Attempting to update token. Refresh Token:', refresh_token ? refresh_token.substring(0, 30) + '...' : 'No refresh token');\r\n        if (!refresh_token) {\r\n            logout();\r\n            setLoading(false);\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const response = await api.post('/login/refresh/', { refresh: refresh_token });\r\n            localStorage.setItem('access_token', response.data.access);\r\n            console.log('AuthContext: Token refreshed successfully. New Access Token:', response.data.access.substring(0, 30) + '...');\r\n            await fetchUserDetails(); // Fetch user details and permissions after token refresh\r\n\r\n        } catch (err) {\r\n            console.error(\"Error refreshing token:\", err);\r\n            toast.error(\"Sesión expirada. Por favor, inicia sesión de nuevo.\");\r\n            logout();\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, [logout, fetchUserDetails]);\r\n\r\n    const login = async (username, password) => {\r\n        setLoading(true);\r\n        try {\r\n            const tokenResponse = await api.post('/login/', { username, password });\r\n            const { access, refresh } = tokenResponse.data;\r\n\r\n            localStorage.setItem('access_token', access);\r\n            localStorage.setItem('refresh_token', refresh);\r\n\r\n            console.log('AuthContext: Login successful. Access Token:', access.substring(0, 30) + '...');\r\n            console.log('AuthContext: Refresh Token:', refresh.substring(0, 30) + '...');\r\n\r\n            await fetchUserDetails(); // Fetch user details and permissions after successful login\r\n\r\n            toast.success('Inicio de sesión exitoso!');\r\n            navigate('/home');\r\n        } catch (err) {\r\n            console.error('Login error:', err.response?.data || err);\r\n            const errorMessage = err.response?.data?.detail || 'Error en las credenciales. Inténtalo de nuevo.';\r\n            toast.error(errorMessage);\r\n            setIsAuthenticated(false);\r\n            setUser(null);\r\n            // NEW: Clear permissions on login failure\r\n            setUserPermissions(new Set());\r\n            localStorage.removeItem('access_token');\r\n            localStorage.removeItem('refresh_token');\r\n            localStorage.removeItem('user_data');\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    // NEW: hasPermission function\r\n    const hasPermission = useCallback((permissionCode) => {\r\n        // console.log(\"Checking permission:\", permissionCode, \"User permissions:\", Array.from(userPermissions)); // For debugging\r\n        return userPermissions.has(permissionCode);\r\n    }, [userPermissions]);\r\n\r\n    useEffect(() => {\r\n        const loadInitialAuth = async () => {\r\n            const storedAccessToken = localStorage.getItem('access_token');\r\n            const storedRefreshToken = localStorage.getItem('refresh_token');\r\n\r\n            if (storedAccessToken && storedRefreshToken) {\r\n                try {\r\n                    // Attempt to fetch user details first if access token seems valid\r\n                    // This avoids a refresh cycle if the access token is still good\r\n                    const decodedToken = jwtDecode(storedAccessToken);\r\n                    const currentTime = Date.now() / 1000;\r\n\r\n                    if (decodedToken.exp > currentTime + 60) { // Token valid for more than 60 seconds\r\n                        console.log(\"AuthContext: Access token valid, fetching user details.\");\r\n                        await fetchUserDetails();\r\n                        setLoading(false); // Set loading to false here if valid\r\n                    } else { // Token expired or expiring soon, try refreshing\r\n                        console.log(\"AuthContext: Access token expired or expiring, refreshing.\");\r\n                        await updateToken();\r\n                    }\r\n                } catch (err) {\r\n                    console.error(\"Error during initial auth check or token decode:\", err);\r\n                    // If decoding fails or any other error, try to refresh\r\n                    await updateToken();\r\n                }\r\n            } else {\r\n                setLoading(false); // No tokens, not authenticated\r\n            }\r\n        };\r\n        loadInitialAuth();\r\n\r\n        // Interval for periodic token refresh (every 4 minutes as you had)\r\n        const fourMinutes = 4 * 60 * 1000;\r\n        const interval = setInterval(() => {\r\n            if (localStorage.getItem('refresh_token') && isAuthenticated) { // Only refresh if refresh token exists and user is considered authenticated\r\n                console.log(\"AuthContext: Interval triggered token refresh.\");\r\n                updateToken();\r\n            }\r\n        }, fourMinutes);\r\n\r\n        return () => clearInterval(interval); // Cleanup interval on unmount\r\n    }, [updateToken, fetchUserDetails, isAuthenticated]); // Added isAuthenticated to dependencies\r\n\r\n    const authContextValue = {\r\n        isAuthenticated,\r\n        user,\r\n        loading,\r\n        login,\r\n        logout,\r\n        fetchUserDetails,\r\n        hasPermission, // NEW: Expose hasPermission\r\n        userPermissions, // Optional: expose for debugging or display\r\n    };\r\n\r\n    if (loading) {\r\n        return <div className=\"flex justify-center items-center h-screen text-2xl text-gray-700\">Cargando autenticación...</div>;\r\n    }\r\n\r\n    return (\r\n        <AuthContext.Provider value={authContextValue}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n\r\nexport const useAuth = () => {\r\n    const context = useContext(AuthContext);\r\n    if (!context) {\r\n        throw new Error('useAuth must be used within an AuthProvider');\r\n    }\r\n    return context;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}