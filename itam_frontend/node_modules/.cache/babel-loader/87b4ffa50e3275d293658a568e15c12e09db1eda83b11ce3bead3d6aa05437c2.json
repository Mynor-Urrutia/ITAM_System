{"ast":null,"code":"// C:\\Proyectos\\ITAM_System\\itam_frontend\\src\\api.js\nimport axios from 'axios';\nimport { jwtDecode } from 'jwt-decode'; // Make sure you have jwt-decode installed\n\nconst api = axios.create({\n  baseURL: 'http://127.0.0.1:8000/api/',\n  // Your Django API base URL\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to attach JWT token\napi.interceptors.request.use(config => {\n  const accessToken = localStorage.getItem('access_token'); // Make sure this key matches\n  if (accessToken) {\n    config.headers.Authorization = `Bearer ${accessToken}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor to handle token refresh\napi.interceptors.response.use(response => response, async error => {\n  const originalRequest = error.config;\n  // If the error is 401 Unauthorized and it's not a login/refresh request\n  // and we haven't tried to refresh yet for this request\n  if (error.response.status === 401 && !originalRequest._retry) {\n    originalRequest._retry = true; // Mark as retried\n    const refreshToken = localStorage.getItem('refresh_token'); // Make sure this key matches\n\n    if (refreshToken) {\n      try {\n        const response = await axios.post('http://127.0.0.1:8000/api/login/refresh/', {\n          refresh: refreshToken\n        });\n        const newAccessToken = response.data.access;\n        localStorage.setItem('access_token', newAccessToken);\n\n        // Update the original request's header with the new token\n        originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;\n        return api(originalRequest); // Retry the original request with the new token\n      } catch (refreshError) {\n        // If refreshing fails, clear tokens and redirect to login\n        console.error('Token refresh failed:', refreshError);\n        localStorage.removeItem('access_token');\n        localStorage.removeItem('refresh_token');\n        localStorage.removeItem('user_data'); // Clear user data as well\n        window.location.href = '/login'; // Redirect to login page\n        return Promise.reject(refreshError);\n      }\n    } else {\n      // No refresh token available, redirect to login\n      localStorage.removeItem('access_token');\n      localStorage.removeItem('refresh_token');\n      localStorage.removeItem('user_data');\n      window.location.href = '/login';\n    }\n  }\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"names":["axios","jwtDecode","api","create","baseURL","headers","interceptors","request","use","config","accessToken","localStorage","getItem","Authorization","error","Promise","reject","response","originalRequest","status","_retry","refreshToken","post","refresh","newAccessToken","data","access","setItem","refreshError","console","removeItem","window","location","href"],"sources":["C:/Proyectos/ITAM_System/itam_frontend/src/api.js"],"sourcesContent":["// C:\\Proyectos\\ITAM_System\\itam_frontend\\src\\api.js\r\nimport axios from 'axios';\r\nimport { jwtDecode } from 'jwt-decode'; // Make sure you have jwt-decode installed\r\n\r\nconst api = axios.create({\r\n    baseURL: 'http://127.0.0.1:8000/api/', // Your Django API base URL\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n    },\r\n});\r\n\r\n// Request interceptor to attach JWT token\r\napi.interceptors.request.use(\r\n    (config) => {\r\n        const accessToken = localStorage.getItem('access_token'); // Make sure this key matches\r\n        if (accessToken) {\r\n            config.headers.Authorization = `Bearer ${accessToken}`;\r\n        }\r\n        return config;\r\n    },\r\n    (error) => {\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// Response interceptor to handle token refresh\r\napi.interceptors.response.use(\r\n    (response) => response,\r\n    async (error) => {\r\n        const originalRequest = error.config;\r\n        // If the error is 401 Unauthorized and it's not a login/refresh request\r\n        // and we haven't tried to refresh yet for this request\r\n        if (error.response.status === 401 && !originalRequest._retry) {\r\n            originalRequest._retry = true; // Mark as retried\r\n            const refreshToken = localStorage.getItem('refresh_token'); // Make sure this key matches\r\n\r\n            if (refreshToken) {\r\n                try {\r\n                    const response = await axios.post('http://127.0.0.1:8000/api/login/refresh/', {\r\n                        refresh: refreshToken,\r\n                    });\r\n                    const newAccessToken = response.data.access;\r\n                    localStorage.setItem('access_token', newAccessToken);\r\n\r\n                    // Update the original request's header with the new token\r\n                    originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;\r\n                    return api(originalRequest); // Retry the original request with the new token\r\n                } catch (refreshError) {\r\n                    // If refreshing fails, clear tokens and redirect to login\r\n                    console.error('Token refresh failed:', refreshError);\r\n                    localStorage.removeItem('access_token');\r\n                    localStorage.removeItem('refresh_token');\r\n                    localStorage.removeItem('user_data'); // Clear user data as well\r\n                    window.location.href = '/login'; // Redirect to login page\r\n                    return Promise.reject(refreshError);\r\n                }\r\n            } else {\r\n                // No refresh token available, redirect to login\r\n                localStorage.removeItem('access_token');\r\n                localStorage.removeItem('refresh_token');\r\n                localStorage.removeItem('user_data');\r\n                window.location.href = '/login';\r\n            }\r\n        }\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\nexport default api;"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,YAAY,CAAC,CAAC;;AAExC,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACrBC,OAAO,EAAE,4BAA4B;EAAE;EACvCC,OAAO,EAAE;IACL,cAAc,EAAE;EACpB;AACJ,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACvBC,MAAM,IAAK;EACR,MAAMC,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC;EAC1D,IAAIF,WAAW,EAAE;IACbD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,WAAW,EAAE;EAC1D;EACA,OAAOD,MAAM;AACjB,CAAC,EACAK,KAAK,IAAK;EACP,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CACJ,CAAC;;AAED;AACAZ,GAAG,CAACI,YAAY,CAACW,QAAQ,CAACT,GAAG,CACxBS,QAAQ,IAAKA,QAAQ,EACtB,MAAOH,KAAK,IAAK;EACb,MAAMI,eAAe,GAAGJ,KAAK,CAACL,MAAM;EACpC;EACA;EACA,IAAIK,KAAK,CAACG,QAAQ,CAACE,MAAM,KAAK,GAAG,IAAI,CAACD,eAAe,CAACE,MAAM,EAAE;IAC1DF,eAAe,CAACE,MAAM,GAAG,IAAI,CAAC,CAAC;IAC/B,MAAMC,YAAY,GAAGV,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC;;IAE5D,IAAIS,YAAY,EAAE;MACd,IAAI;QACA,MAAMJ,QAAQ,GAAG,MAAMjB,KAAK,CAACsB,IAAI,CAAC,0CAA0C,EAAE;UAC1EC,OAAO,EAAEF;QACb,CAAC,CAAC;QACF,MAAMG,cAAc,GAAGP,QAAQ,CAACQ,IAAI,CAACC,MAAM;QAC3Cf,YAAY,CAACgB,OAAO,CAAC,cAAc,EAAEH,cAAc,CAAC;;QAEpD;QACAN,eAAe,CAACb,OAAO,CAACQ,aAAa,GAAG,UAAUW,cAAc,EAAE;QAClE,OAAOtB,GAAG,CAACgB,eAAe,CAAC,CAAC,CAAC;MACjC,CAAC,CAAC,OAAOU,YAAY,EAAE;QACnB;QACAC,OAAO,CAACf,KAAK,CAAC,uBAAuB,EAAEc,YAAY,CAAC;QACpDjB,YAAY,CAACmB,UAAU,CAAC,cAAc,CAAC;QACvCnB,YAAY,CAACmB,UAAU,CAAC,eAAe,CAAC;QACxCnB,YAAY,CAACmB,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC;QACtCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ,CAAC,CAAC;QACjC,OAAOlB,OAAO,CAACC,MAAM,CAACY,YAAY,CAAC;MACvC;IACJ,CAAC,MAAM;MACH;MACAjB,YAAY,CAACmB,UAAU,CAAC,cAAc,CAAC;MACvCnB,YAAY,CAACmB,UAAU,CAAC,eAAe,CAAC;MACxCnB,YAAY,CAACmB,UAAU,CAAC,WAAW,CAAC;MACpCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;IACnC;EACJ;EACA,OAAOlB,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CACJ,CAAC;AAED,eAAeZ,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}