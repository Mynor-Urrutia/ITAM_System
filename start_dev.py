#!/usr/bin/env python3
"""
Script para iniciar la aplicaci√≥n ITAM en modo desarrollo
Inicia tanto el backend como el frontend autom√°ticamente
"""

import os
import sys
import subprocess
import platform
import time
from pathlib import Path

def run_command(command, cwd=None, shell=False, background=False):
    """Ejecuta un comando"""
    try:
        if background:
            process = subprocess.Popen(
                command if shell else command.split(),
                cwd=cwd,
                shell=shell
            )
            return process
        else:
            result = subprocess.run(
                command if shell else command.split(),
                cwd=cwd,
                shell=shell,
                capture_output=True,
                text=True,
                check=True
            )
            return result.stdout.strip()
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error: {e.stderr}")
        return None

def check_setup():
    """Verifica que la instalaci√≥n est√© completa"""
    print("üîç Verificando instalaci√≥n...")

    # Verificar directorios
    if not Path("itam_backend").exists():
        print("‚ùå Directorio itam_backend no encontrado")
        return False

    if not Path("itam_frontend").exists():
        print("‚ùå Directorio itam_frontend no encontrado")
        return False

    # Verificar entorno virtual
    if platform.system() == "Windows":
        venv_python = Path("itam_backend/venv/Scripts/python.exe")
    else:
        venv_python = Path("itam_backend/venv/bin/python")

    if not venv_python.exists():
        print("‚ùå Entorno virtual no encontrado. Ejecuta setup_dev.py primero")
        return False

    # Verificar node_modules
    if not Path("itam_frontend/node_modules").exists():
        print("‚ùå Dependencias del frontend no instaladas. Ejecuta setup_dev.py primero")
        return False

    return True

def start_backend():
    """Inicia el backend de Django"""
    print("üîß Iniciando backend Django...")

    backend_dir = Path("itam_backend")

    if platform.system() == "Windows":
        cmd = ["venv\\Scripts\\python", "manage.py", "runserver"]
    else:
        cmd = ["venv/bin/python", "manage.py", "runserver"]

    process = run_command(cmd, cwd=backend_dir, background=True)
    if process:
        print("‚úÖ Backend iniciado en http://localhost:8000")
        return process
    else:
        print("‚ùå Error iniciando backend")
        return None

def start_frontend():
    """Inicia el frontend de React"""
    print("‚öõÔ∏è  Iniciando frontend React...")

    frontend_dir = Path("itam_frontend")
    process = run_command(["npm", "start"], cwd=frontend_dir, background=True)

    if process:
        print("‚úÖ Frontend iniciado en http://localhost:3000")
        return process
    else:
        print("‚ùå Error iniciando frontend")
        return None

def wait_for_servers():
    """Espera a que los servidores est√©n listos"""
    print("\n‚è≥ Esperando que los servidores inicien...")
    time.sleep(5)

    # Aqu√≠ podr√≠as agregar verificaciones m√°s sofisticadas
    # como hacer ping a los endpoints

def show_info():
    """Muestra informaci√≥n de acceso"""
    print("\n" + "=" * 50)
    print("üéâ ¬°Sistema ITAM iniciado exitosamente!")
    print("=" * 50)
    print("\nüîó URLs de acceso:")
    print("‚Ä¢ Aplicaci√≥n principal: http://localhost:3000")
    print("‚Ä¢ Panel de administraci√≥n: http://localhost:8000/admin/")
    print("‚Ä¢ API del backend: http://localhost:8000/api/")
    print("\nüë§ Credenciales de administrador:")
    print("‚Ä¢ Usuario: admin")
    print("‚Ä¢ Contrase√±a: admin123")
    print("\n‚ö†Ô∏è  IMPORTANTE: Cambia la contrase√±a despu√©s del primer inicio")
    print("\nüõë Para detener: Presiona Ctrl+C")
    print("=" * 50)

def main():
    """Funci√≥n principal"""
    print("üöÄ Iniciando Sistema ITAM - Modo Desarrollo")
    print("=" * 50)

    # Verificar instalaci√≥n
    if not check_setup():
        print("\n‚ùå Instalaci√≥n incompleta. Ejecuta 'python setup_dev.py' primero")
        input("Presiona Enter para salir...")
        sys.exit(1)

    # Iniciar backend
    backend_process = start_backend()
    if not backend_process:
        print("‚ùå No se pudo iniciar el backend")
        sys.exit(1)

    # Peque√±a pausa
    time.sleep(2)

    # Iniciar frontend
    frontend_process = start_frontend()
    if not frontend_process:
        print("‚ùå No se pudo iniciar el frontend")
        backend_process.terminate()
        sys.exit(1)

    # Esperar y mostrar info
    wait_for_servers()
    show_info()

    try:
        # Mantener los procesos ejecut√°ndose
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        print("\n\nüõë Deteniendo servidores...")
        backend_process.terminate()
        frontend_process.terminate()
        print("‚úÖ Servidores detenidos")
        sys.exit(0)

if __name__ == "__main__":
    main()